{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","onClick","chooseCharacter","id","alt","name","src","image","console","log","Wrapper","children","App","state","characters","charactersChosen","score","highScore","wins","status","handleInputChange","event","preventDefault","target","value","setState","shuffleCharacters","array","i","length","j","Math","floor","random","high","includes","shuffle","this","map","item","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.448b4515.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n      <div className=\"img-container\"\r\n      onClick= {() => props.chooseCharacter(props.id)} className=\"choose\">\r\n        <img className=\"character\" alt={props.name} src={props.image} />\r\n        {console.log(\"props is\")}\r\n        {console.log(props)}\r\n      {/* <span onClick= {() => props.removeFriend(props.id)} className=\"remove\">ùòÖ</span> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    characters,\n    charactersChosen: [],\n    score: 0,\n    highScore: 0,\n    wins: 0,\n    status: \"\",\n  };\n\n  handleInputChange = event => {\n    event.preventDefault();\n    let { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n\n  //Shuffling algorithm taken from https://javascript.info/task/shuffle\n  shuffleCharacters = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n\n  chooseCharacter = id => {\n\n\n    console.log(\"this.state.characters is \");\n    console.log(this.state.characters);\n\n\n\n\n    if (!this.state.score) {\n      this.setState({\n        status: \"\"\n      })\n    }\n\n    else if (this.state.score === 12) {\n      this.setState({\n        status: \"\",\n        charactersChosen: [],\n        score: 0\n      })\n\n    }\n\n\n\n    if (!this.state.charactersChosen.includes(id)) {\n\n      if (this.state.score >= 11) {\n        this.setState({\n          status: \"You won! Congratulations!\\n Refresh or click any picture to play again!\",\n          highScore: 12,\n          score: 0,\n          charactersChosen: [],\n          wins: this.state.wins + 1\n        })\n        console.log(\"You won!\");\n\n      }\n      else {\n\n        let shuffle = this.state.characters;\n        shuffle = this.shuffleCharacters(shuffle);\n        this.setState({\n          charactersChosen: [...this.state.charactersChosen, id],\n          score: this.state.score + 1\n        })\n      }\n    }\n    else {\n      let high;\n      if (this.state.score > this.state.highScore) {\n        high = this.state.score;\n      }\n      else {\n        high = this.state.highScore;\n      }\n      console.log(\"You lose!\")\n\n      this.setState({\n        charactersChosen: [],\n        highScore: high,\n        score: 0,\n        status: \"You lost! Whoops. Refresh or click any picture to play again!\"\n      })\n    }\n\n\n  }\n\n  render() {\n    return (\n      <Wrapper>\n\n\n        <div className=\"jumbotron\">\n          <h1 className=\"title\">Star Wars Clicky Game!</h1>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row stats\">\n            <div className=\"col-6\">\n            </div>\n            <div className=\"col-2\"> Score: {this.state.score}</div>\n            <div className=\"col-2\">\n              High Score: {this.state.highScore}\n            </div>\n            <div className=\"col-2\">\n              Total Wins: {this.state.wins}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-8\">Click each character once. If you click all 12 only once, you win!</div>\n            <div className=\"col-4\"></div>\n          </div>\n          <h5 className=\"text-center mt-3\">\n            {this.state.status}\n\n          </h5>\n\n          <div className=\"row\">\n            {this.state.characters.map(item =>\n              <CharacterCard\n                name={item.name}\n                image={item.image}\n                id={item.id}\n                onChange={this.handleInputChange}\n                chooseCharacter={this.chooseCharacter}\n\n              />\n            )}\n\n          </div>\n        </div>\n\n\n\n\n\n      </Wrapper >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}